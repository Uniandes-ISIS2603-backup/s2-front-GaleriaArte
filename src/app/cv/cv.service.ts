import { environment } from './../../environments/environment';
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable, throwError } from 'rxjs'         ;
import { Cv    } from './cv'     ;
<<<<<<< HEAD


const API_URL = environment.apiURL;
const cvs  = '/cvs'   ;
const artist ='/artists'; 
=======
import {cvDetail}from './cv-detail';
import { environment } from 'src/environments/environment';


const API_URL = environment.apiURL;
const cvs = '/artists/';
//const API_URL = "../../assets/";
//const cvs = 'cv.json';
>>>>>>> 279f51bab0513f68809de9efe7ec8e5443533efe

@Injectable({
  providedIn: 'root'
})
export class CvService {

  /**
    * The headers sent in every request to the API
    */
   headers = new HttpHeaders({
    'Access-Control-Allow-Origin': '*'
});

  constructor(private http: HttpClient) { }
<<<<<<< HEAD

  /**
    * Retrieves the list of cvs in the BookStore
    * @returns The list of cvs
    */
   getCvs(): Observable<Cv[]> {
    return this.http.get<Cv[]>(API_URL + cvs, { headers: this.headers });
}

/**
    * Retrieves the information of an cv from the BookStore
    * @param cvId The id of the cv
    * @returns The cv details
    */
   getCv(cvId): Observable<Cv> {
    return this.http.get<Cv>(API_URL + artist+ '/' + cvId + cvs, { headers: this.headers });
}

   /**
    * Creates an cv
    * @param cv The new cv
    * @returns The confirmation that the cv was created
    */
   createcv(cv): Observable<boolean> {
    return this.http.post<boolean>(API_URL + cvs, cv, { headers: this.headers });
=======
 
  getCvs(): Observable<Cv[]> {
    return this.http.get<Cv[]>(API_URL + cvs);
  }

  getCvDetail(cvId): Observable<cvDetail> 
     {
       return this.http.get<cvDetail>(API_URL + cvs + '/' + cvId);
    }
    createCv(cv): Observable<Cv> {
      return this.http.post<Cv>(API_URL + cvs+cv.id+'/cvs', cv);
>>>>>>> 279f51bab0513f68809de9efe7ec8e5443533efe
}

/**
* Updates an cv
* @param cv The cv's information updated
* @returns The confirmation that the cv was updated
*/
updatecv(cv): Observable<boolean> {
    return this.http.put<boolean>(API_URL + cvs + '/' + cv.id, cv, { headers: this.headers });
}

/**
* Deletes an cv and all their books from the BookStore
* @param cvId The id of the cv
* @returns The confirmation that the cv and all their books was deleted
*/
deletecv(cvId): Observable<boolean> {
    return this.http.delete<boolean>(API_URL + cvs + '/' + cvId, { headers: this.headers });
}

/**
    * The function which handles the errors generated by the requests
    * @param error The error which the API REST returned
    */
   private handleError(error: any) {
    return throwError(error.error.errorMessage);
}
  
}
